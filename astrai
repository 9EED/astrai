from math import *
from random import *
from pyray import *
from shapes import *
from classes import *
import numpy as np

width = 1200
height = 720
scroll = 0.3
max_ships = 20
borders = 1000

mutation = 0.2

snap = False
snapTo = 0

camera = np.array([ 0, 0, .18, width, height])

ships = []
while len(ships) < max_ships:
    weights = []
    for layer in range(3):
        weights.append([])
        if layer == 0 or layer == 1:
            for node in range(12):
                weights[layer].append([])
                if layer == 0:
                    for connection in range(26):
                        weights[layer][node].append(random()*8-4)
                if layer == 1:
                    for connection in range(12):
                        weights[layer][node].append(random()*8-4)
        if layer == 2:
            for node in range(3):
                weights[layer].append([])
                for connection in range(12):
                    weights[layer][node].append(random()*8-4)
    biases = []
    for layer in range(3):
        biases.append([])
        if layer == 0 or layer == 1:
            for node in range(12):
                biases[layer].append(random()*8-4)
        if layer == 2:
            for node in range(3):
                biases[layer].append(random()*8-4)
    network = [weights, biases]
    color = [int(random()*255),int(random()*255),int(random()*255)]
    ships.append(Ship(np.array([random()*borders*2-borders, random()*borders*2-borders]), random()*pi, network, color))

bullets = []
foods = []

init_window( width, height, "window")
set_target_fps(30)
step = 0
while not window_should_close():
    step += 1
    
    while len(bullets) > 100: bullets.pop(0)
    while len(foods) > 45: foods.pop(0)

    probabilities = []
    for ship in ships:
        probability = pow(ship.age, 2) * pow(ship.kills+1, 2) * pow(ship.eats+1, 4) * pow(random()+0.5, 1)
        probabilities.append(probability)
    breeder = probabilities.index(max(probabilities))
    snapTo = ships[breeder]

    if step % 60 == 0: print(human_format(sum(probabilities)))
 
    while len(ships) < max_ships:
        weights = []
        for layer in range(3):
            weights.append([])
            if layer == 0 or layer == 1:
                for node in range(12):
                    weights[layer].append([])
                    if layer == 0:
                        for connection in range(26):
                            weights[layer][node].append(ships[breeder].network[0][layer][node][connection] * (random()*mutation*2 + 1-mutation ))
                    if layer == 1:
                        for connection in range(12):
                            weights[layer][node].append(ships[breeder].network[0][layer][node][connection] * (random()*mutation*2 + 1-mutation ))
            if layer == 2:
                for node in range(3):
                    weights[layer].append([])
                    for connection in range(12):
                        weights[layer][node].append(ships[breeder].network[0][layer][node][connection] * (random()*mutation*2 + 1-mutation ))
        biases = []
        for layer in range(3):
            biases.append([])
            if layer == 0 or layer == 1:
                for node in range(12):
                    biases[layer].append(ships[breeder].network[1][layer][node] * (random()*mutation*2 + 1-mutation ))
            if layer == 2:
                for node in range(3):
                    biases[layer].append(ships[breeder].network[1][layer][node] * (random()*mutation*2 + 1-mutation ))
        network = [weights, biases]
        color = [[],[],[]]
        color[0] = int(ships[breeder].color[0] * (random()*mutation*2 + 1-mutation ) * 1.3 % 255) 
        color[1] = int(ships[breeder].color[1] * (random()*mutation*2 + 1-mutation ) * 1.3 % 255) 
        color[2] = int(ships[breeder].color[2] * (random()*mutation*2 + 1-mutation ) * 1.3 % 255) 

        ships.append(Ship(np.array([random()*borders*2-borders, random()*borders*2-borders]), random()*pi, network, color))

    if is_mouse_button_down(MOUSE_BUTTON_LEFT):
        camera += np.array([get_mouse_delta().x, get_mouse_delta().y, 0, 0, 0]) / camera[2]
    if get_mouse_wheel_move() > 0:
        camera[2] = camera[2] * (1 + scroll)
    if get_mouse_wheel_move() < 0:
        camera[2] = camera[2] * (1 - scroll)
    if is_key_pressed(KEY_SPACE):
        snap = not snap
    if snap == True:
        camera[0] = -snapTo.pos[0]
        camera[1] = -snapTo.pos[1]


    begin_drawing()
    clear_background(Color(3, 3, 5, 255))

    for i in ships:
        i.update()
        i.think(ships, bullets, foods, camera)
        i.render(camera)
        if i.pos[0] > borders:
            i.pos[0] = -borders
        if i.pos[0] < -borders:
            i.pos[0] = borders
        if i.pos[1] > borders:
            i.pos[1] = -borders
        if i.pos[1] < -borders:
            i.pos[1] = borders
    
    deletedBullets = []
    for a, i in enumerate(bullets):
        i.update()
        i.render(camera)
        if i.pos[0] > borders:
            deletedBullets.append(a)
        if i.pos[0] < -borders:
            deletedBullets.append(a)
        if i.pos[1] > borders:
            deletedBullets.append(a)
        if i.pos[1] < -borders:
            deletedBullets.append(a)
    bullets = [i for j, i in enumerate(bullets) if j not in deletedBullets]

    for i in foods:
        i.render(camera)

    dying = []
    eaten = []
    for index1, ship1 in enumerate(ships):
        for index2, ship2 in enumerate(ships):
            if index1 == index2: continue
            d = ship1.pos - ship2.pos
            d = sqrt(d[0]**2 + d[1]**2)
            if d < ship1.size + ship2.size:
                dying.append(index1)
                dying.append(index2)
        for bullet in bullets:
            if id(ship1) == bullet.id: continue
            d = ship1.pos - bullet.pos
            d = sqrt(d[0]**2 + d[1]**2)
            if d < ship1.size + ship2.size:
                dying.append(index1)
                for ship3 in ships:
                    if id(ship3) == bullet.id:
                        ship3.kills += 1
        for foodIndex, food in enumerate(foods):
            d = ship1.pos - food.pos
            d = sqrt(d[0]**2 + d[1]**2)
            if d < ship1.size + food.size:
                ship1.fuel += 50
                ship1.eats += 1
                eaten.append(foodIndex)
        if ship1.fuel <= 0:
            dying.append(index1)
    foods = [i for j, i in enumerate(foods) if j not in eaten]
    foods += [Food(ships[i].pos) for i in dying]
    ships = [i for j, i in enumerate(ships) if j not in dying]

    line(-borders, -borders, -borders, borders, camera)
    line(-borders, -borders, borders, -borders, camera)
    line(-borders, borders, borders, borders, camera)
    line(borders, -borders, borders, borders, camera)


    end_drawing()


close_window()